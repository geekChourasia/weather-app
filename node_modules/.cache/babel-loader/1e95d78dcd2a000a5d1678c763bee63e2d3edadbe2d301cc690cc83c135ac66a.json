{"ast":null,"code":"// import { DateTime } from \"luxon\";\n\n// const API_KEY = \"c7d07137b6f2a9082f049b996b018d24\";\n// const BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\n// // https://api.openweathermap.org/data/2.5/onecall?lat=48.8534&lon=2.3488&exclude=current,minutely,hourly,alerts&appid=1fa9ff4126d95b8db54f3897a208e91c&units=metric\n\n// const getWeatherData = (infoType, searchParams) => {\n//   const url = new URL(BASE_URL + \"/\" + infoType);\n//   url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n//   return fetch(url).then((res) => res.json());\n// };\n\n// const formatCurrentWeather = (data) => {\n//   const {\n//     coord: { lat, lon },\n//     main: { temp, feels_like, temp_min, temp_max, humidity },\n//     name,\n//     dt,\n//     sys: { country, sunrise, sunset },\n//     weather,\n//     wind: { speed },\n//   } = data;\n\n//   const { main: details, icon } = weather[0];\n\n//   return {\n//     lat,\n//     lon,\n//     temp,\n//     feels_like,\n//     temp_min,\n//     temp_max,\n//     humidity,\n//     name,\n//     dt,\n//     country,\n//     sunrise,\n//     sunset,\n//     details,\n//     icon,\n//     speed,\n//   };\n// };\n\n// const formatForecastWeather = (data) => {\n//     console.log(\"data\",data)\n//     let { timezone, daily, hourly } = data;\n\n//     daily = daily && Array.isArray(daily) ? daily.slice(1, 6).map((d) => {\n//       return {\n//         title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n//         temp: d.temp.day,\n//         icon: d.weather[0].icon,\n//       };\n//     }) : [];\n\n//     hourly = hourly && Array.isArray(hourly) ? hourly.slice(1, 6).map((d) => {\n//       return {\n//         title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n//         temp: d.temp,\n//         icon: d.weather[0].icon,\n//       };\n//     }) : [];\n\n//     return { timezone, daily, hourly };\n//   };\n\n// const getFormattedWeatherData = async (searchParams) => {\n//   const formattedCurrentWeather = await getWeatherData(\n//     \"weather\",\n//     searchParams\n//   ).then(formatCurrentWeather);\n\n//   const { lat, lon } = formattedCurrentWeather;\n\n//   const formattedForecastWeather = await getWeatherData(\"onecall\", {\n//     lat,\n//     lon,\n//     exclude: \"current,minutely,alerts\",\n//     units: searchParams.units,\n//   }).then(formatForecastWeather);\n\n//   return { ...formattedCurrentWeather, ...formattedForecastWeather };\n// };\n\n// const formatToLocalTime = (\n//   secs,\n//   zone,\n//   format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\n// ) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\n// const iconUrlFromCode = (code) =>\n//   `http://openweathermap.org/img/wn/${code}@2x.png`;\n\n// export default getFormattedWeatherData;\n\n// export { formatToLocalTime, iconUrlFromCode };\n\nimport { DateTime } from \"luxon\";\nconst API_KEY = \"c7d07137b6f2a9082f049b996b018d24\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getWeatherData = async (infoType, searchParams) => {\n  const url = new URL(`${BASE_URL}/${infoType}`);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching weather data:\", error);\n    throw error;\n  }\n};\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\nconst formatForecastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily && Array.isArray(daily) ? daily.slice(1, 6).map(d => ({\n    title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n    temp: d.temp.day,\n    icon: d.weather[0].icon\n  })) : [];\n  hourly = hourly && Array.isArray(hourly) ? hourly.slice(1, 6).map(d => ({\n    title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n    temp: d.temp,\n    icon: d.weather[0].icon\n  })) : [];\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\nconst getFormattedWeatherData = async searchParams => {\n  try {\n    const formattedCurrentWeather = await getWeatherData(\"weather\", searchParams).then(formatCurrentWeather);\n    const {\n      lat,\n      lon\n    } = formattedCurrentWeather;\n    const formattedForecastWeather = await getWeatherData(\"onecall\", {\n      lat,\n      lon,\n      exclude: \"current,minutely,alerts\",\n      units: searchParams.units\n    }).then(formatForecastWeather).then(res => console.log(\"data2\", res));\n    return {\n      ...formattedCurrentWeather,\n      ...formattedForecastWeather\n    };\n  } catch (error) {\n    console.error(\"Error getting formatted weather data:\", error);\n    throw error;\n  }\n};\nconst formatToLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nconst iconUrlFromCode = code => `http://openweathermap.org/img/wn/${code}@2x.png`;\nexport default getFormattedWeatherData;\nexport { formatToLocalTime, iconUrlFromCode };","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","response","fetch","data","json","error","console","formatCurrentWeather","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","timezone","daily","hourly","Array","isArray","slice","map","d","title","formatToLocalTime","day","getFormattedWeatherData","formattedCurrentWeather","then","formattedForecastWeather","exclude","units","res","log","secs","zone","format","fromSeconds","setZone","toFormat","iconUrlFromCode","code"],"sources":["/Users/abhishekchourasia/Documents/GitHub/weather-app/src/Service/WeatherService.js"],"sourcesContent":["// import { DateTime } from \"luxon\";\n\n// const API_KEY = \"c7d07137b6f2a9082f049b996b018d24\";\n// const BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\n// // https://api.openweathermap.org/data/2.5/onecall?lat=48.8534&lon=2.3488&exclude=current,minutely,hourly,alerts&appid=1fa9ff4126d95b8db54f3897a208e91c&units=metric\n\n// const getWeatherData = (infoType, searchParams) => {\n//   const url = new URL(BASE_URL + \"/\" + infoType);\n//   url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n//   return fetch(url).then((res) => res.json());\n// };\n\n// const formatCurrentWeather = (data) => {\n//   const {\n//     coord: { lat, lon },\n//     main: { temp, feels_like, temp_min, temp_max, humidity },\n//     name,\n//     dt,\n//     sys: { country, sunrise, sunset },\n//     weather,\n//     wind: { speed },\n//   } = data;\n\n//   const { main: details, icon } = weather[0];\n\n//   return {\n//     lat,\n//     lon,\n//     temp,\n//     feels_like,\n//     temp_min,\n//     temp_max,\n//     humidity,\n//     name,\n//     dt,\n//     country,\n//     sunrise,\n//     sunset,\n//     details,\n//     icon,\n//     speed,\n//   };\n// };\n\n// const formatForecastWeather = (data) => {\n//     console.log(\"data\",data)\n//     let { timezone, daily, hourly } = data;\n    \n//     daily = daily && Array.isArray(daily) ? daily.slice(1, 6).map((d) => {\n//       return {\n//         title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n//         temp: d.temp.day,\n//         icon: d.weather[0].icon,\n//       };\n//     }) : [];\n  \n//     hourly = hourly && Array.isArray(hourly) ? hourly.slice(1, 6).map((d) => {\n//       return {\n//         title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n//         temp: d.temp,\n//         icon: d.weather[0].icon,\n//       };\n//     }) : [];\n  \n//     return { timezone, daily, hourly };\n//   };\n\n// const getFormattedWeatherData = async (searchParams) => {\n//   const formattedCurrentWeather = await getWeatherData(\n//     \"weather\",\n//     searchParams\n//   ).then(formatCurrentWeather);\n\n//   const { lat, lon } = formattedCurrentWeather;\n\n//   const formattedForecastWeather = await getWeatherData(\"onecall\", {\n//     lat,\n//     lon,\n//     exclude: \"current,minutely,alerts\",\n//     units: searchParams.units,\n//   }).then(formatForecastWeather);\n\n//   return { ...formattedCurrentWeather, ...formattedForecastWeather };\n// };\n\n// const formatToLocalTime = (\n//   secs,\n//   zone,\n//   format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\n// ) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\n// const iconUrlFromCode = (code) =>\n//   `http://openweathermap.org/img/wn/${code}@2x.png`;\n\n// export default getFormattedWeatherData;\n\n// export { formatToLocalTime, iconUrlFromCode };\n\n\nimport { DateTime } from \"luxon\";\n\nconst API_KEY = \"c7d07137b6f2a9082f049b996b018d24\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nconst getWeatherData = async (infoType, searchParams) => {\n  const url = new URL(`${BASE_URL}/${infoType}`);\n  url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching weather data:\", error);\n    throw error;\n  }\n};\n\nconst formatCurrentWeather = (data) => {\n  const {\n    coord: { lat, lon },\n    main: { temp, feels_like, temp_min, temp_max, humidity },\n    name,\n    dt,\n    sys: { country, sunrise, sunset },\n    weather,\n    wind: { speed },\n  } = data;\n\n  const { main: details, icon } = weather[0];\n\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed,\n  };\n};\n\nconst formatForecastWeather = (data) => {\n  let { timezone, daily, hourly } = data;\n\n  daily = daily && Array.isArray(daily)\n    ? daily.slice(1, 6).map((d) => ({\n        title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n        temp: d.temp.day,\n        icon: d.weather[0].icon,\n      }))\n    : [];\n\n  hourly = hourly && Array.isArray(hourly)\n    ? hourly.slice(1, 6).map((d) => ({\n        title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n        temp: d.temp,\n        icon: d.weather[0].icon,\n      }))\n    : [];\n\n  return { timezone, daily, hourly };\n};\n\nconst getFormattedWeatherData = async (searchParams) => {\n  try {\n    const formattedCurrentWeather = await getWeatherData(\n      \"weather\",\n      searchParams\n    ).then(formatCurrentWeather);\n\n    const { lat, lon } = formattedCurrentWeather;\n\n    const formattedForecastWeather = await getWeatherData(\"onecall\", {\n      lat,\n      lon,\n      exclude: \"current,minutely,alerts\",\n      units: searchParams.units,\n    }).then(formatForecastWeather)\n    .then((res)=>console.log(\"data2\",res));\n\n    return { ...formattedCurrentWeather, ...formattedForecastWeather };\n  } catch (error) {\n    console.error(\"Error getting formatted weather data:\", error);\n    throw error;\n  }\n};\n\nconst formatToLocalTime = (\n  secs,\n  zone,\n  format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nconst iconUrlFromCode = (code) =>\n  `http://openweathermap.org/img/wn/${code}@2x.png`;\n\nexport default getFormattedWeatherData;\nexport { formatToLocalTime, iconUrlFromCode };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}