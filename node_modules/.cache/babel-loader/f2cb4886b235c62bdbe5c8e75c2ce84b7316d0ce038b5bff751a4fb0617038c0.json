{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = \"33fe3624c21819f209ccdeb58af1f41b\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  console.log(\"url\", url);\n  return fetch(url).then(res => res.json());\n  //   .then((data)=>data);\n};\n\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    weather,\n    speed,\n    details,\n    icon\n  };\n};\nconst formatForecastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n      temp: d.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\nconst getFormatttedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData(\"weather\", searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentWeather;\n  const formattedForecastWeather = await getWeatherData(\"onecall\", {\n    lat,\n    lon,\n    exclude: \"current,minutely,alerts\",\n    units: searchParams.units\n  }).then(formatForecastWeather);\n  return {\n    ...formattedCurrentWeather,\n    ...formattedForecastWeather\n  };\n};\nconst formatToLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy' | Local time : 'hh:mm a \") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nconst iconUrlFromCode = code => `http://openweathermap.org/img/wn/${code}@2x.png`;\nexport default getFormatttedWeatherData;\nexport { formatToLocalTime, iconUrlFromCode };","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","console","log","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","timezone","daily","hourly","slice","map","d","title","formatToLocalTime","day","getFormatttedWeatherData","formattedCurrentWeather","formattedForecastWeather","exclude","units","secs","zone","format","fromSeconds","setZone","toFormat","iconUrlFromCode","code"],"sources":["/Users/abhishekchourasia/Documents/GitHub/weather-app/src/Service/WeatherService.js"],"sourcesContent":["\n\n\n\n\n\nimport {DateTime} from \"luxon\"\n\nconst API_KEY = \"33fe3624c21819f209ccdeb58af1f41b\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n  console.log(\"url\", url);\n\n  return fetch(url).then((res) => res.json());\n  //   .then((data)=>data);\n};\n\nconst formatCurrentWeather = (data) => {\n  const {\n    coord: { lat, lon },\n    main: { temp, feels_like, temp_min, temp_max, humidity },\n    name,\n    dt,\n    sys: { country, sunrise, sunset },\n    weather,\n    wind: { speed },\n  } = data;\n\n  const { main: details, icon } = weather[0];\n\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    weather,\n    speed,\n    details,\n    icon,\n  };\n};\n\nconst formatForecastWeather = (data) => {\n    let { timezone, daily, hourly } = data;\n    daily = daily.slice(1, 6).map((d) => {\n      return {\n        title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n        temp: d.temp.day,\n        icon: d.weather[0].icon,\n      };\n    });\n  \n    hourly = hourly.slice(1, 6).map((d) => {\n      return {\n        title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n        temp: d.temp,\n        icon: d.weather[0].icon,\n      };\n    });\n  \n    return { timezone, daily, hourly };\n  };\n\nconst getFormatttedWeatherData = async (searchParams) => {\n  const formattedCurrentWeather = await getWeatherData(\n    \"weather\",\n    searchParams\n  ).then(formatCurrentWeather);\n\n  const { lat, lon } = formattedCurrentWeather;\n\n  const formattedForecastWeather = await getWeatherData(\"onecall\", {\n    lat,\n    lon,\n    exclude: \"current,minutely,alerts\",\n    units: searchParams.units,\n  }).then(formatForecastWeather);\n\n  return {...formattedCurrentWeather,...formattedForecastWeather};\n};\n\nconst formatToLocalTime=(secs,zone, format=\"cccc, dd LLL yyyy' | Local time : 'hh:mm a \")=>DateTime.fromSeconds(secs).setZone(zone).toFormat(format)\n\nconst iconUrlFromCode=(code)=>`http://openweathermap.org/img/wn/${code}@2x.png`;\n\nexport default getFormatttedWeatherData;\n\nexport { formatToLocalTime, iconUrlFromCode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}